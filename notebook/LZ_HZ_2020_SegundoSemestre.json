{
	"name": "LZ_HZ_2020_SegundoSemestre",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "tcccibele",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "dfb4b9a8-7ee8-4510-a95b-ae554e4a9b8f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c2e7ea02-c1b2-4906-9c73-95c7b9e0b637/resourceGroups/TCC_Cibele/providers/Microsoft.Synapse/workspaces/tcccibele/bigDataPools/tcccibele",
				"name": "tcccibele",
				"type": "Spark",
				"endpoint": "https://tcccibele.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tcccibele",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructField, StructType, IntegerType, StringType\r\n",
					"from pyspark.sql import functions as f"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"source": [
					"# Definir schema do arquivo\r\n",
					"schema = StructType([ \r\n",
					"    StructField(\"Ano\", StringType(), True), \r\n",
					"    StructField(\"Trimestre\", StringType(), True), \r\n",
					"    StructField(\"Mes\", StringType(), True), \r\n",
					"    StructField(\"Dia\", StringType(), True), \r\n",
					"    StructField(\"Pais\", StringType(), True), \r\n",
					"    StructField(\"UF\", StringType(), True), \r\n",
					"    StructField(\"GrupoVulneravel\", StringType(), True), \r\n",
					"    StructField(\"CanalAtendimento\", StringType(), True), \r\n",
					"    StructField(\"CenarioViolacao\", StringType(), True), \r\n",
					"    StructField(\"Frequencia\", StringType(), True), \r\n",
					"    StructField(\"Motivacao\", StringType(), True), \r\n",
					"    StructField(\"Denunciante\", StringType(), True), \r\n",
					"    StructField(\"SexoVitima\", StringType(), True),\r\n",
					"    StructField(\"VitimaLGBT\", StringType(), True),\r\n",
					"    StructField(\"RacaVitima\", StringType(), True),\r\n",
					"    StructField(\"EscolaridadeVitima\", StringType(), True),\r\n",
					"    StructField(\"IdadeVitima\", StringType(), True),\r\n",
					"    StructField(\"FaixaRendaVitima\", StringType(), True),\r\n",
					"    StructField(\"ProfissaoVitima\", StringType(), True),\r\n",
					"    StructField(\"ReligiaoVitima\", StringType(), True),\r\n",
					"    StructField(\"DeficienciaVitima\", StringType(), True),\r\n",
					"    StructField(\"DeficienciaDoencaRara\", StringType(), True),\r\n",
					"    StructField(\"Categoria1\", StringType(), True),\r\n",
					"    StructField(\"Categoria2\", StringType(), True),\r\n",
					"    StructField(\"Categoria3\", StringType(), True),\r\n",
					"    StructField(\"Categoria4\", StringType(), True),\r\n",
					"    StructField(\"Categoria5\", StringType(), True),\r\n",
					"    StructField(\"Categoria6\", StringType(), True)\r\n",
					"])"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Ler arquivo de origem da landing zone\r\n",
					"df = spark.read.format(\"csv\") \\\r\n",
					"            .schema(schema) \\\r\n",
					"            .options(quote='\"', sep=';', encoding='ISO-8859-1') \\\r\n",
					"            .load('/landing_zone/2020/segundo_semestre_2020_1.csv')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Remover colunas e linhas sem valor para o data lake\r\n",
					"df = df.where((df[0].isNotNull()) \\\r\n",
					"                & (df[0] != 'Ano'))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Capitalizar todos os textos e incluir 0 onde h√° nulos\r\n",
					"names = df.schema.names\r\n",
					"for name in names:\r\n",
					"    df = df.withColumn(name, f.initcap(f.col(name)))\r\n",
					"    #df = df.withColumn(name,f.regexp_replace(name,',',''))\r\n",
					"    #df = df.withColumn(name, df[name].cast(IntegerType()))\r\n",
					"\r\n",
					"df = df.fillna(0)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.limit(3).toPandas()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Escrever dados limpos em formato parque no azure storage\r\n",
					"#df.write.format('parquet').mode('overwrite').save('/history_zone/2020/PrimeiroSemestre/')\r\n",
					"\r\n",
					"df.write.partitionBy(\"Ano\",\"Mes\").mode(\"overwrite\").parquet(\"/history_zone/2020/SegundoSemestre/\")\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.read.parquet('/history_zone/2020/SegundoSemestre/')\r\n",
					"df.limit(3).toPandas()"
				],
				"execution_count": 9
			}
		]
	}
}